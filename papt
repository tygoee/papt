#!/bin/bash

_help() {
    # Display a help message
    echo -e "\033[1mPapt v0.0 - Personal apt\033[0m"
    echo "Usage: $0 [options|args] command"
    echo
    echo -e "\033[1mOptions:\033[0m"
    echo "  install: Installs specified packages"
    echo
    echo -e "\033[1mArguments:\033[0m"
    echo "  --setup: Sets up necessary for installing"\
            "and running these packages"
    echo "  --help:  Display this help message"
}


_install() {
    # Install a package (and all dependencies)
    if [ $# -eq 0 ]; then
        echo "E: No packages specified"
        exit 1
    fi

    # Make a temp dir and cd there
    local temp_dir="$HOME/.temp/"
    mkdir -p "$temp_dir"
    trap '[ -d "$HOME/.temp/" ] && rm -rf "$HOME/.temp/"' EXIT

    cd "$temp_dir" || {
        echo "E: Cannot CD into $temp_dir"
        exit 1;
    }

    # Check if all packages exist
    echo -n "Reading package lists... "
    for package_name in "$@"; do
        if [[ $package_name == -* ]]; then
            continue
        elif ! apt-cache show "$package_name" &>/dev/null; then
            echo -e "\nE: Unable to locate package $package_name"
            exit 1
        fi
    done
    echo "Done"

    # Read all dependencies
    local dependencies

    echo -n "Building dependency tree... "
    for package_name in "$@"; do
        if [[ $package_name == -* ]]; then
            continue
        fi

        dependencies+=$(apt-cache depends --recurse -i "$package_name" |
                        grep "Depends:" | awk '{print $2}')
    done

    # Define the arguments, without
    # the ones starting with "-"
    local pkgs

    for arg in "$@"; do
        if ! [[ "$arg" == -* ]]; then
            pkgs+="$arg "
        fi
    done

    # Define the packages that include virtual
    local _packages
    _packages="$pkgs$(echo "$dependencies" | tr ' ' '\n' | sort -u | tr '\n' ' ')"

    local packages=()

    # Append to $packages if they aren't virtual
    for package in $_packages; do
        package=${package#<} && package=${package%>}
        if ! apt-cache show -q=0 "$package" 2>&1 | grep -q "virtual"; then
        packages+=("$package")
        fi
    done

    echo "Done"

    # TODO: Read the package lists to see
    # if the packages already exist, and
    # the recomended + suggested packages
    echo -n "Reading state information... "
    echo "Done"

    # List the installed packages and
    # give a confirmation prompt
    echo "The following additional packages will be installed:"
    echo "${packages[@]}" | fold -s -w $(($(tput cols)-2)) | sed -e 's/^/  /'

    echo -n "Do you want to continue [Y/n] "
    if ! [[ $* =~ "-y" ]]; then
        read -r continue
        if ! [[ "$continue" =~ ^(Y|y|)$ ]]; then
            echo "Abort."
            exit 0
        fi
    fi

    # Download package and all dependencies

    # TODO: Ignore virtual packages using
    # apt download .. || { apt show | grep ..; }

    apt download "${packages[@]}" || { echo "E: Error while trying to install packages" && exit 1; }

    # Install all of them in .temp/install/
    for deb_file in "$temp_dir"*.deb; do
        echo "Installing ${deb_file##*/}..."
        dpkg -x "$deb_file" "install/"
    done

    # Cd into .temp/install/ and copy all files
    # to their corresponding directories
    echo "Moving files..."

    local inst_dir="$temp_dir/install"
    local local_dir="$HOME/.local/"
    mkdir -p "$local_dir"

    for file in "$inst_dir"/*; do
        if [ -d "$file" ] && [ "$(basename "$file")" != "usr" ]; then
            cp -r "$file" "$local_dir"
        fi
    done

    if [ -d "$inst_dir/usr/" ]; then
        for file in "$inst_dir/usr"/*; do
            if [ -d "$file" ] && [ "$(basename "$file")" != "local" ]; then
                cp -r "$file" "$local_dir"
            fi
        done
    fi

    if [ -d "$inst_dir/usr/local/" ]; then
        cp -r "$inst_dir/usr/local/"* "$local_dir"
    fi


    # Echo Done when the
    # installation is done
    echo "Done."
}


_setup() {
    # Setup all necessary files

    # Create all needed dirs if they dont exist
    mkdir -p "$HOME/.local/bin/"
    mkdir -p "$HOME/.local/lib/"
    mkdir -p "$HOME/.local/lib64/"
    mkdir -p "$HOME/.local/lib/x86_64-linux-gnu/"

    echo "Created library directories..."

    # Add the library path to .profile
    # if --setup is specified
    local lib_paths
    lib_paths="$(printf '%s' \
        "export LD_LIBRARY_PATH=" \
        "$HOME/.local/lib:" \
        "$HOME/.local/lib64:" \
        "$HOME/.local/lib/x86_64-linux-gnu")"

    # Append to $HOME/.profile
    # if it isn't already there
    if ! grep -q "$lib_paths" \
            "$HOME/.profile"; then
        echo "Adding library paths..."
        echo "$lib_paths" >> "$HOME/.profile"
        eval "$lib_paths"
        echo "Please reboot your computer or"\
                "login again to complete the setup"
    else
        echo "Library paths already"\
                "present, ignoring..."
    fi

    echo "Done."
}


_syntaxerr() {
    echo "Usage: $0 [options|args] command"
    echo "See --help for more info"
    exit 1
}


# Exit if there are no arguments
if [ $# -eq 0 ]; then
    _syntaxerr
fi

# Execute the right command
case "$1" in
  # Arguments
  --help)
    _help
    ;;
  --setup)
    _setup
    ;;

  # Options
  install)
    _install "${@:2}"
    ;;

  # None of these
  *)
    _syntaxerr
    ;;
esac